{
  "title": "Arts Holland",
  "longtitle": "Arts Holland",
  "doc": "<p>Arts Holland is a central collection of open data on Dutch culture and tourism. All data about events, shows and venues shown and used by the The <a href=\"http://www.artsholland.com/\">artsholland.com</a> tourist portal directly come from the Arts Holland open data plaform, but the Arts Holland open data platform contains much more data, free and open for everybody to use.</p>\n\n<p>Arts Holland contains the following data:</p>\n\n<ul>\n<li>Events and venues in the Netherlands' biggest cities from <a href=\"http://www.vvv.nl/\">VVV</a> and <a href=\"http://www.uitburo.nl/\">Nederlands Uitburo</a></li>\n<li>Events in and around Amsterdam from <a href=\"http://www.iamsterdam.com/\">I amsterdam</a></li>\n<li>Publicly accessible cultural heritage sites from the <a href=\"http://www.cultureelerfgoed.nl/en\">Cultural Heritage Agency of the Netherlands</a></li>\n<li>Reviews, articles and blog posts from <a href=\"http://www.artsholland.com/\">Arts Holland</a> itself</li>\n</ul>\n\n<p>Arts Holland provides a REST API and a SPARQL endpoint to access the data. The <a href=\"http://dev.artsholland.com/\">Arts Holland developers site</a> explains both, but especially SPARQL can be somewhat hard to learn. </p>\n\n<p><a href=\"http://www.w3.org/TR/rdf-sparql-query/\">SPARQL</a> is an <a href=\"http://www.w3.org/RDF/\">RDF</a> query language for the <a href=\"http://www.w3.org/standards/semanticweb/\">Semantic Web</a>. You can use the Arts Holland <a href=\"http://api.artsholland.com/sparql?apiKey=85715d4734ee8a22571c6b69a789d8ac\">SPARQL endpoint</a> to compose and test your own queries, combine triples from different objects and let the open data plaform return only the data you need for your specific purpose.</p>\n\n<p>This visual tutorial explains the Arts Holland data and data model, and the SPARQL code you can use to query the data. Example queries will let you traverse into the Arts Holland RDF database, and you are able to view and modify each query on the Arts Holland SPARQL endpoint itself. All the SPARQL constructions and keywords that are used in this tutorial are explained, but if you need more in-depth explanation, you could have a look at both the <a href=\"http://en.wikibooks.org/wiki/XQuery/SPARQL_Tutorial\">SPARQL Tutorial Wikibook</a> and <a href=\"http://www.cambridgesemantics.com/semantic-university/sparql-by-example\">SPARQL by Example</a> from Cambridge Semantics.</p>",
  "path": [],
  "children": [
    {
      "title": "Data",
      "longtitle": "Data",
      "doc": "<p>At first sight, SPARQL queries look a lot like standard SQL. SPARQL supports <a href=\"http://www.w3.org/TR/sparql11-query/#groupby\">grouping</a> (<code>GROUP BY</code>), <a href=\"http://www.w3.org/TR/sparql11-query/#modOrderBy\">ordering</a> (<code>ORDER BY</code>) and <a href=\"http://www.w3.org/TR/sparql11-query/#aggregateAlgebra\">aggregate functions</a> like <a href=\"http://www.w3.org/TR/sparql11-query/#defn_aggCount\">counting</a> (<code>COUNT</code>). <code>LIMIT</code> and <code>OFFSET</code>.</p>\n\n<p>But apart from the similarities in syntax, SPARQL works differently than SQL. Tables do not exist, all data is stored as <a href=\"http://www.w3.org/TR/rdf-concepts/#section-triples\">triples</a>. An RDF triple consists of three components: the <em>subject</em>, the <em>predicate</em> and the <em>object</em>. </p>\n\n<p>SPARQL queries usually start with <a href=\"http://www.w3.org/TR/sparql11-query/#prefNames\">namespace definitions</a>. The <code>PREFIX</code> keyword can be used to define namespaces and make queries shorter and easier to change and read.</p>\n\n<p>The query below retrieves the five cities where the most events take place in the coming two weeks. First, all entities of type <code>ah:Event</code> are selected, and combined with the venue and date where the event takes place. Venues have an address, of which the value of the <code>vcard:locality</code> predicate is also selected. By specifying triples, one selects combinations objects for which all those triples hold; <a href=\"http://www.w3.org/TR/sparql11-query/#expressions\">filters</a> can be used to select specific ranges and values.</p>",
      "sparql": "PREFIX ah: <http://purl.org/artsholland/1.0/>\nPREFIX time: <http://www.w3.org/2006/time#>\nPREFIX vcard: <http://www.w3.org/2006/vcard/ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?city (COUNT(?event) AS ?events)\nWHERE {\n  ?event rdf:type ah:Event ;\n    ah:venue ?venue ;\n    time:hasBeginning ?date .\n\n  ?venue ah:locationAddress ?address .\n\n  ?address vcard:locality ?city .\n\n  FILTER (?date >= \"??date_start\"^^xsd:dateTime)\n  FILTER (?date < \"??date_end\"^^xsd:dateTime)\n} \nGROUP BY ?city\nORDER BY DESC(?events)\nLIMIT 5",
      "path": [
        0
      ],
      "source": [
        {
          "title": "??city",
          "longtitle": "Venues in ??city",
          "subtitle": "??events events",
          "doc": "<p>The following query selects eight venues in ??city ordered by the amount of distinct productions that take place in the coming two weeks.</p>\n\n<p>Arts Holland contains strings in English and Dutch. When you want to filter only one of those two languages, the  <a href=\"http://www.w3.org/TR/sparql11-query/#func-langMatches\"><code>langMatches</code> filter</a> can be used. If you would execute this query without the this filter, duplicate results would be returned for each venue with a multilangual title. </p>\n\n<p>This query uses <a href=\"http://www.w3.org/TR/sparql11-query/#subqueries\">subqueries</a> to make sure that first all different productions are selected per venue, and only then are grouped, counted and ordered by number of distinct productions.</p>",
          "sparql": "PREFIX ah: <http://purl.org/artsholland/1.0/>\nPREFIX time: <http://www.w3.org/2006/time#>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX vcard: <http://www.w3.org/2006/vcard/ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nSELECT ?venue_title ?venue ?street_address\n       ?postal_code ?productions\nWHERE {\n  SELECT ?venue_title ?venue ?street_address \n         ?postal_code (COUNT(?production) AS ?productions)\n  WHERE {\n    ?venue dc:title ?venue_title ;\n    FILTER (langMatches(lang(?venue_title), \"nl\"))\n    {\n      SELECT DISTINCT ?venue ?production ?street_address ?postal_code\n      WHERE {\n        ?venue a ah:Venue ;\n          ah:locationAddress ?address .  \n        ?address vcard:locality \"??city\" ;\n          vcard:street-address ?street_address ;\n          vcard:postal-code ?postal_code .\n  \n        ?event a ah:Event ;\n          ah:venue ?venue ;\n          ah:production ?production ;\n          time:hasBeginning ?date .      \n\n        FILTER (?date >= \"??date_start\"^^xsd:dateTime)\n        FILTER (?date < \"??date_end\"^^xsd:dateTime)\n      }\n    }  \n  }\n  GROUP BY ?venue ?venue_title ?street_address ?postal_code\n  ORDER BY DESC(?productions)\n  LIMIT 8\n}\nORDER BY ?venue_title"
        },
        {
          "title": "??venue_title",
          "longtitle": "Events in ??venue_title",
          "subtitle": "??street_address",
          "doc": "<p>This query selects a list of ten distinct productions, ordered by the first time they occur in the ??venue_title in ??city.</p>\n\n<p>The <a href=\"http://www.w3.org/TR/sparql11-query/#optionals\"><code>OPTIONAL</code> keyword</a> can be used to loosen the selection of certain triples. In this example, also productions without a homepage are returned; the triple which selects the website of a production is optional.</p>",
          "sparql": "PREFIX ah: <http://purl.org/artsholland/1.0/>\nPREFIX time: <http://www.w3.org/2006/time#>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nSELECT ?production_title ?homepage (MIN(?date) AS ?date)\nWHERE {\n  ?event ah:venue <??venue> ;\n    time:hasBeginning ?date ;  \n    ah:production ?production .\n  \n  ?production  dc:title ?production_title .\n  \n  OPTIONAL {\n    ?production foaf:homepage ?homepage .\n  }\n    \n  FILTER (?date >= \"??date_start\"^^xsd:dateTime)\n  FILTER (?date < \"??date_end\"^^xsd:dateTime)\n  \n  FILTER (langMatches(lang(?production_title), \"nl\"))\n  \n} \nGROUP BY ?production ?production_title ?homepage\nORDER BY ?date\nLIMIT 10"
        },
        {
          "title": "??production_title",
          "subtitle": "??date"
        }
      ]
    },
    {
      "title": "Model",
      "longtitle": "Data Model",
      "doc": "<p>The main classes in the Arts Holland database are <em>events</em>, <em>venues</em> and <em>productions</em>. A production is a certain play, concert, or show, which can take place multiple times, in one or more venues. An event is an instance of a production, in one venue on one specific date and time. Addresses are separate classes, as are attachments (i.e. images or videos linked to certain venues or productions). </p>\n\n<p>The query below gets the five classes of which there are the most instances in the Arts Holland database. Square brackets can be used for blank nodes which are not needed in the result set.</p>",
      "sparql": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?class_label ?class (COUNT(?class) AS ?count)\nWHERE {\n  [] a ?class .\n  ?class rdfs:label ?class_label .  \n} \nGROUP BY ?class ?class_label\nORDER BY DESC(?count)\nLIMIT 5",
      "path": [
        1
      ],
      "source": [
        {
          "title": "??class_label",
          "longtitle": "??class_label predicates",
          "subtitle": "??count objects",
          "doc": "<p>This query can be used to get the <a href=\"http://www.w3.org/TR/rdf-schema/#ch_type\">type</a> and <a href=\"http://www.w3.org/TR/rdf-schema/#ch_range\">range</a> of the predicates of the class <code>&lt;??class&gt;</code>. First, a maximum of five predicates in Arts Holland's own namespace are selected, using a filter and two of SPARQL's <a href=\"http://www.w3.org/TR/sparql11-query/#func-strstarts\">string functions</a> (i.e. <code>STR</code> and <code>STRSTARTS</code>). The results of this subquery are combined with the results of the second subquery which selects another maximum of five predicates - this time <em>not</em> in Art Holland's namespace. The <a href=\"http://www.w3.org/TR/sparql11-query/#alternatives\"><code>UNION</code> keyword</a> can be used to combine multiple result sets.</p>\n\n<p>Arts Holland only knows about its own <a href=\"http://www.w3.org/TR/rdf-schema/\">ontology</a>, but used many predicates and classes from other schemas such as <a href=\"http://www.w3.org/TR/rdf-schema/\">RDFS</a> and <a href=\"http://dublincore.org/\">Dublin Core</a>. Arts Holland does not know the metadata of predicates and classes from <em>external</em> ontologies, and thus does not return the range, domain and label of predicates from those ontologies.</p>",
          "sparql": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?predicate ?p_type ?p_label ?p_range\nWHERE {  \n  {\n    SELECT * WHERE {\n      OPTIONAL {\n        ?predicate rdf:type ?p_type ;\n          rdfs:label ?p_label ;\n          rdfs:range ?p_range .  \n      }\n      ?subject a <??class> ;\n        ?predicate ?object .\n    \n      FILTER( STRSTARTS(STR(?predicate),\"http://purl.org/artsholland/1.0/\") )\n    } LIMIT 5\n  } \n  UNION \n  {  \n    SELECT * WHERE {\n      OPTIONAL {\n        ?predicate rdf:type ?p_type ;\n          rdfs:label ?p_label ;\n          rdfs:range ?p_range .  \n      }\n      ?subject a <??class> ;\n        ?predicate ?object .\n            \n      FILTER( !STRSTARTS(STR(?predicate),\"http://purl.org/artsholland/1.0/\") )\n    } LIMIT 5\n  }  \n}"
        },
        {
          "title": "??predicate",
          "subtitle": "Range = <??p_range>"
        }
      ]
    }
  ]
}